apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "webapp.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "webapp.name" . }}
    helm.sh/chart: {{ include "webapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    deploy.marcsoft.io/config: deployconfigval
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "webapp.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "webapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        pod.marcsoft.io/config: podconfigval
    spec:
      initContainers:
        - name: init
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.inittag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          volumeMounts:
            - mountPath: "/config"
              name: config
              readOnly: false
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - mountPath: "/etc/webapp"
              name: secret-value
              readOnly: true
            - mountPath: "/config"
              name: config
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            periodSeconds: {{ .Values.service.periodSeconds }}
            httpGet:
              path: /health
              port: http
          readinessProbe:
            periodSeconds: {{ .Values.service.periodSeconds }}
            httpGet:
              path: /health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
          - name: SECRET
            value: "/etc/webapp/{{ .Values.service.secretFileName }}"
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                name: sw-configmap
                key: redis-host
          - name: CONFIG_VAL
            valueFrom:
              configMapKeyRef:
                name: sw-configmap
                key: config-value
#            value: "redis"
      volumes:
        - name: secret-value
          secret:
            secretName: "{{ .Values.service.secretName }}"
        - name: config
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
